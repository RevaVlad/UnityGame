//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BasicInput"",
            ""id"": ""5f38aa19-3ba5-4028-b697-f4d5ab8c21d1"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d29b7e06-b1bc-4081-b1b5-d8e36ddfa9a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b3500d7e-4290-4c69-9a29-e106663aa735"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TakeLadder"",
                    ""type"": ""Button"",
                    ""id"": ""809074a0-0f22-470b-a512-873b63d299f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RestartLevel"",
                    ""type"": ""Button"",
                    ""id"": ""9abe793e-3c83-4fb9-8011-89c8fa716ac8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""749c2b3c-878b-46ac-8732-a07e1f342c4d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""292d701c-db49-4463-a866-4efd1c116f4e"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ba36cf3-377b-404f-98c2-baefab747bec"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD KEYS"",
                    ""id"": ""091d9e79-8c66-4be0-8bde-1bfdd4169b74"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f68662b5-cecf-46b9-b0bb-bacd5c8d40a2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""63e8522b-dcd4-490a-83dd-290e3fcfbcc0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow keys"",
                    ""id"": ""fc6e14f2-79f1-447d-9336-55d61cc4e93d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b0e572bf-a4ef-427e-a759-b89dc309da19"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b42b13a4-720a-418f-9c17-4a097fe079a9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Dualshock"",
                    ""id"": ""e797225b-34a7-4faa-a1f3-8c1028c21a73"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""12b31231-c05f-4d0b-bff6-4a23fff2c08e"",
                    ""path"": ""<DualShockGamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a2aae144-fa2f-4b75-937a-0ae11abf4c82"",
                    ""path"": ""<DualShockGamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e2d84380-87ea-4ba3-9660-92d0bec2c23c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0986761e-d4b0-43c7-8762-00b723d29407"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""736c17f1-0924-4d8d-b943-17f133d38d98"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LadderInput"",
            ""id"": ""b202e925-72f2-416a-8dc5-038c66514777"",
            ""actions"": [
                {
                    ""name"": ""DropLadder"",
                    ""type"": ""Button"",
                    ""id"": ""2d8192e6-754e-45ba-9398-5c5defab100a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TravelThroughPipe"",
                    ""type"": ""Button"",
                    ""id"": ""70aeb293-cfb1-4b67-b80e-6eac12c55d0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRightWithLadder"",
                    ""type"": ""Button"",
                    ""id"": ""27e46682-cdc2-436f-a321-54cca752ea34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeftWithLadder"",
                    ""type"": ""Button"",
                    ""id"": ""04e8fb20-b352-49ed-bd12-79071f4d6000"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RestartLevel"",
                    ""type"": ""Button"",
                    ""id"": ""9090f518-18d0-4e86-b7e2-33f670e7eab2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ecccdf8-53be-400c-a7b2-d0a5ace5e832"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a8be479-72b3-4f83-827d-357f044813f9"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f30eca3e-7645-425d-b2fb-9a4ec302a7b2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightWithLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9f2ad05-e445-4aaa-be0f-233994bbf91c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightWithLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8b59f6c-f4c5-4367-949b-2a9cbb1dda54"",
                    ""path"": ""<DualShockGamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightWithLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c65da14-ce98-4ed2-8bbb-8a4351de25b6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftWithLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41fc2b4b-b30e-4817-8b9a-a37237226be3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftWithLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a4fe5fa-82ec-42d3-8c30-e46edc9fdcc1"",
                    ""path"": ""<DualShockGamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftWithLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42f9a80c-0f4a-435e-9a08-6edc58d0ac8c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TravelThroughPipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""641c947f-e3ad-4db3-bf39-ec4c1b6ed438"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TravelThroughPipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6e1f119-e46f-4d4c-8d2e-03a2bf3f9749"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicInput
        m_BasicInput = asset.FindActionMap("BasicInput", throwIfNotFound: true);
        m_BasicInput_Jump = m_BasicInput.FindAction("Jump", throwIfNotFound: true);
        m_BasicInput_Move = m_BasicInput.FindAction("Move", throwIfNotFound: true);
        m_BasicInput_TakeLadder = m_BasicInput.FindAction("TakeLadder", throwIfNotFound: true);
        m_BasicInput_RestartLevel = m_BasicInput.FindAction("RestartLevel", throwIfNotFound: true);
        // LadderInput
        m_LadderInput = asset.FindActionMap("LadderInput", throwIfNotFound: true);
        m_LadderInput_DropLadder = m_LadderInput.FindAction("DropLadder", throwIfNotFound: true);
        m_LadderInput_TravelThroughPipe = m_LadderInput.FindAction("TravelThroughPipe", throwIfNotFound: true);
        m_LadderInput_MoveRightWithLadder = m_LadderInput.FindAction("MoveRightWithLadder", throwIfNotFound: true);
        m_LadderInput_MoveLeftWithLadder = m_LadderInput.FindAction("MoveLeftWithLadder", throwIfNotFound: true);
        m_LadderInput_RestartLevel = m_LadderInput.FindAction("RestartLevel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicInput
    private readonly InputActionMap m_BasicInput;
    private List<IBasicInputActions> m_BasicInputActionsCallbackInterfaces = new List<IBasicInputActions>();
    private readonly InputAction m_BasicInput_Jump;
    private readonly InputAction m_BasicInput_Move;
    private readonly InputAction m_BasicInput_TakeLadder;
    private readonly InputAction m_BasicInput_RestartLevel;
    public struct BasicInputActions
    {
        private @PlayerControls m_Wrapper;
        public BasicInputActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_BasicInput_Jump;
        public InputAction @Move => m_Wrapper.m_BasicInput_Move;
        public InputAction @TakeLadder => m_Wrapper.m_BasicInput_TakeLadder;
        public InputAction @RestartLevel => m_Wrapper.m_BasicInput_RestartLevel;
        public InputActionMap Get() { return m_Wrapper.m_BasicInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicInputActions set) { return set.Get(); }
        public void AddCallbacks(IBasicInputActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicInputActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @TakeLadder.started += instance.OnTakeLadder;
            @TakeLadder.performed += instance.OnTakeLadder;
            @TakeLadder.canceled += instance.OnTakeLadder;
            @RestartLevel.started += instance.OnRestartLevel;
            @RestartLevel.performed += instance.OnRestartLevel;
            @RestartLevel.canceled += instance.OnRestartLevel;
        }

        private void UnregisterCallbacks(IBasicInputActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @TakeLadder.started -= instance.OnTakeLadder;
            @TakeLadder.performed -= instance.OnTakeLadder;
            @TakeLadder.canceled -= instance.OnTakeLadder;
            @RestartLevel.started -= instance.OnRestartLevel;
            @RestartLevel.performed -= instance.OnRestartLevel;
            @RestartLevel.canceled -= instance.OnRestartLevel;
        }

        public void RemoveCallbacks(IBasicInputActions instance)
        {
            if (m_Wrapper.m_BasicInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicInputActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicInputActions @BasicInput => new BasicInputActions(this);

    // LadderInput
    private readonly InputActionMap m_LadderInput;
    private List<ILadderInputActions> m_LadderInputActionsCallbackInterfaces = new List<ILadderInputActions>();
    private readonly InputAction m_LadderInput_DropLadder;
    private readonly InputAction m_LadderInput_TravelThroughPipe;
    private readonly InputAction m_LadderInput_MoveRightWithLadder;
    private readonly InputAction m_LadderInput_MoveLeftWithLadder;
    private readonly InputAction m_LadderInput_RestartLevel;
    public struct LadderInputActions
    {
        private @PlayerControls m_Wrapper;
        public LadderInputActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DropLadder => m_Wrapper.m_LadderInput_DropLadder;
        public InputAction @TravelThroughPipe => m_Wrapper.m_LadderInput_TravelThroughPipe;
        public InputAction @MoveRightWithLadder => m_Wrapper.m_LadderInput_MoveRightWithLadder;
        public InputAction @MoveLeftWithLadder => m_Wrapper.m_LadderInput_MoveLeftWithLadder;
        public InputAction @RestartLevel => m_Wrapper.m_LadderInput_RestartLevel;
        public InputActionMap Get() { return m_Wrapper.m_LadderInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LadderInputActions set) { return set.Get(); }
        public void AddCallbacks(ILadderInputActions instance)
        {
            if (instance == null || m_Wrapper.m_LadderInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LadderInputActionsCallbackInterfaces.Add(instance);
            @DropLadder.started += instance.OnDropLadder;
            @DropLadder.performed += instance.OnDropLadder;
            @DropLadder.canceled += instance.OnDropLadder;
            @TravelThroughPipe.started += instance.OnTravelThroughPipe;
            @TravelThroughPipe.performed += instance.OnTravelThroughPipe;
            @TravelThroughPipe.canceled += instance.OnTravelThroughPipe;
            @MoveRightWithLadder.started += instance.OnMoveRightWithLadder;
            @MoveRightWithLadder.performed += instance.OnMoveRightWithLadder;
            @MoveRightWithLadder.canceled += instance.OnMoveRightWithLadder;
            @MoveLeftWithLadder.started += instance.OnMoveLeftWithLadder;
            @MoveLeftWithLadder.performed += instance.OnMoveLeftWithLadder;
            @MoveLeftWithLadder.canceled += instance.OnMoveLeftWithLadder;
            @RestartLevel.started += instance.OnRestartLevel;
            @RestartLevel.performed += instance.OnRestartLevel;
            @RestartLevel.canceled += instance.OnRestartLevel;
        }

        private void UnregisterCallbacks(ILadderInputActions instance)
        {
            @DropLadder.started -= instance.OnDropLadder;
            @DropLadder.performed -= instance.OnDropLadder;
            @DropLadder.canceled -= instance.OnDropLadder;
            @TravelThroughPipe.started -= instance.OnTravelThroughPipe;
            @TravelThroughPipe.performed -= instance.OnTravelThroughPipe;
            @TravelThroughPipe.canceled -= instance.OnTravelThroughPipe;
            @MoveRightWithLadder.started -= instance.OnMoveRightWithLadder;
            @MoveRightWithLadder.performed -= instance.OnMoveRightWithLadder;
            @MoveRightWithLadder.canceled -= instance.OnMoveRightWithLadder;
            @MoveLeftWithLadder.started -= instance.OnMoveLeftWithLadder;
            @MoveLeftWithLadder.performed -= instance.OnMoveLeftWithLadder;
            @MoveLeftWithLadder.canceled -= instance.OnMoveLeftWithLadder;
            @RestartLevel.started -= instance.OnRestartLevel;
            @RestartLevel.performed -= instance.OnRestartLevel;
            @RestartLevel.canceled -= instance.OnRestartLevel;
        }

        public void RemoveCallbacks(ILadderInputActions instance)
        {
            if (m_Wrapper.m_LadderInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILadderInputActions instance)
        {
            foreach (var item in m_Wrapper.m_LadderInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LadderInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LadderInputActions @LadderInput => new LadderInputActions(this);
    public interface IBasicInputActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnTakeLadder(InputAction.CallbackContext context);
        void OnRestartLevel(InputAction.CallbackContext context);
    }
    public interface ILadderInputActions
    {
        void OnDropLadder(InputAction.CallbackContext context);
        void OnTravelThroughPipe(InputAction.CallbackContext context);
        void OnMoveRightWithLadder(InputAction.CallbackContext context);
        void OnMoveLeftWithLadder(InputAction.CallbackContext context);
        void OnRestartLevel(InputAction.CallbackContext context);
    }
}
