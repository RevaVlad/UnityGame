//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BasicInput"",
            ""id"": ""5f38aa19-3ba5-4028-b697-f4d5ab8c21d1"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d29b7e06-b1bc-4081-b1b5-d8e36ddfa9a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b3500d7e-4290-4c69-9a29-e106663aa735"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""749c2b3c-878b-46ac-8732-a07e1f342c4d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""292d701c-db49-4463-a866-4efd1c116f4e"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD KEYS"",
                    ""id"": ""091d9e79-8c66-4be0-8bde-1bfdd4169b74"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f68662b5-cecf-46b9-b0bb-bacd5c8d40a2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""63e8522b-dcd4-490a-83dd-290e3fcfbcc0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow keys"",
                    ""id"": ""fc6e14f2-79f1-447d-9336-55d61cc4e93d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b0e572bf-a4ef-427e-a759-b89dc309da19"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b42b13a4-720a-418f-9c17-4a097fe079a9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""LadderInput"",
            ""id"": ""b202e925-72f2-416a-8dc5-038c66514777"",
            ""actions"": [
                {
                    ""name"": ""MergePlayerandLadder"",
                    ""type"": ""Button"",
                    ""id"": ""d059b054-ffbd-4906-8eda-a2580d3e06ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveLadder"",
                    ""type"": ""Value"",
                    ""id"": ""47179053-bde0-4ff4-bb68-8812e7491917"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d4ceb76-5eb8-4c60-b4aa-e39d8e55cca6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MergePlayerandLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD KEYS"",
                    ""id"": ""81dd25f1-a605-444b-bfdb-d3678e9d3cff"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLadder"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""d2530257-bc68-468c-8f37-77d48cb7a553"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""8ff5863a-1325-4e4c-ac07-fb22c26dcecf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow keys"",
                    ""id"": ""a877197d-c580-4ab7-896c-dd0915a98bc9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLadder"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""188d9f35-1c0e-49f3-8f46-0541d2ec199b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""e765289c-93c0-473d-afe1-239dae59618b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLadder"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicInput
        m_BasicInput = asset.FindActionMap("BasicInput", throwIfNotFound: true);
        m_BasicInput_Jump = m_BasicInput.FindAction("Jump", throwIfNotFound: true);
        m_BasicInput_Move = m_BasicInput.FindAction("Move", throwIfNotFound: true);
        // LadderInput
        m_LadderInput = asset.FindActionMap("LadderInput", throwIfNotFound: true);
        m_LadderInput_MergePlayerandLadder = m_LadderInput.FindAction("MergePlayerandLadder", throwIfNotFound: true);
        m_LadderInput_MoveLadder = m_LadderInput.FindAction("MoveLadder", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicInput
    private readonly InputActionMap m_BasicInput;
    private List<IBasicInputActions> m_BasicInputActionsCallbackInterfaces = new List<IBasicInputActions>();
    private readonly InputAction m_BasicInput_Jump;
    private readonly InputAction m_BasicInput_Move;
    public struct BasicInputActions
    {
        private @PlayerControls m_Wrapper;
        public BasicInputActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_BasicInput_Jump;
        public InputAction @Move => m_Wrapper.m_BasicInput_Move;
        public InputActionMap Get() { return m_Wrapper.m_BasicInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicInputActions set) { return set.Get(); }
        public void AddCallbacks(IBasicInputActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicInputActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IBasicInputActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IBasicInputActions instance)
        {
            if (m_Wrapper.m_BasicInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicInputActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicInputActions @BasicInput => new BasicInputActions(this);

    // LadderInput
    private readonly InputActionMap m_LadderInput;
    private List<ILadderInputActions> m_LadderInputActionsCallbackInterfaces = new List<ILadderInputActions>();
    private readonly InputAction m_LadderInput_MergePlayerandLadder;
    private readonly InputAction m_LadderInput_MoveLadder;
    public struct LadderInputActions
    {
        private @PlayerControls m_Wrapper;
        public LadderInputActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MergePlayerandLadder => m_Wrapper.m_LadderInput_MergePlayerandLadder;
        public InputAction @MoveLadder => m_Wrapper.m_LadderInput_MoveLadder;
        public InputActionMap Get() { return m_Wrapper.m_LadderInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LadderInputActions set) { return set.Get(); }
        public void AddCallbacks(ILadderInputActions instance)
        {
            if (instance == null || m_Wrapper.m_LadderInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LadderInputActionsCallbackInterfaces.Add(instance);
            @MergePlayerandLadder.started += instance.OnMergePlayerandLadder;
            @MergePlayerandLadder.performed += instance.OnMergePlayerandLadder;
            @MergePlayerandLadder.canceled += instance.OnMergePlayerandLadder;
            @MoveLadder.started += instance.OnMoveLadder;
            @MoveLadder.performed += instance.OnMoveLadder;
            @MoveLadder.canceled += instance.OnMoveLadder;
        }

        private void UnregisterCallbacks(ILadderInputActions instance)
        {
            @MergePlayerandLadder.started -= instance.OnMergePlayerandLadder;
            @MergePlayerandLadder.performed -= instance.OnMergePlayerandLadder;
            @MergePlayerandLadder.canceled -= instance.OnMergePlayerandLadder;
            @MoveLadder.started -= instance.OnMoveLadder;
            @MoveLadder.performed -= instance.OnMoveLadder;
            @MoveLadder.canceled -= instance.OnMoveLadder;
        }

        public void RemoveCallbacks(ILadderInputActions instance)
        {
            if (m_Wrapper.m_LadderInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILadderInputActions instance)
        {
            foreach (var item in m_Wrapper.m_LadderInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LadderInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LadderInputActions @LadderInput => new LadderInputActions(this);
    public interface IBasicInputActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ILadderInputActions
    {
        void OnMergePlayerandLadder(InputAction.CallbackContext context);
        void OnMoveLadder(InputAction.CallbackContext context);
    }
}
